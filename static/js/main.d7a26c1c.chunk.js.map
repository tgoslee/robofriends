{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ComponentError.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ComponentError","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAceA,EAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACtB,OACI,yBAAKC,UAAU,mDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,gCAAMF,EAAN,KACA,2BAAIC,MCaLK,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,6BACKA,EAAOC,KAAI,SAACC,EAAMC,GACf,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCI1BW,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACG,yBAAKX,UAAU,OACd,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAWH,MCERI,G,MATA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAmBC,OAAO,UAC5DJ,EAAMK,YCkBJC,E,kDApBX,WAAYN,GAAQ,IAAD,8BACf,gBACKO,MAAO,CACRC,UAAU,GAHC,E,8DAODC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,yDAEJG,KAAKX,MAAMK,a,GAhBGQ,aCmDdC,E,kDA9CX,aAAe,IAAD,8BACV,gBAkBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SAlBzC,EAAKX,MAAQ,CACTnB,OAAQ,GACRM,YAAa,IAJP,E,gEASO,IAAD,OAChByB,MAAM,8CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKX,SAAS,CAACxB,OAAQmC,S,+BASzB,IAAD,OACCC,EAAiBb,KAAKJ,MAAMnB,OAAOqC,QAAO,SAAArC,GAC5C,OAAOA,EAAOP,KAAK6C,cAAcC,SAAS,EAAKpB,MAAMb,YAAYgC,kBAErE,OAAiC,IAA7Bf,KAAKJ,MAAMnB,OAAOwC,OACX,0CAGH,yBAAK5C,UAAU,MACX,wBAAIA,UAAU,OAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU3B,OAAQoC,W,GAtCxBX,aCMEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MACZC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.d7a26c1c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name,email,id}) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 ma2 grow bw2 shadow-5\">\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2> {name} </h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {robots.map((user, i) => {\n                return (\n                    <Card\n                        key={i}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}/>\n\n                );\n            })\n            }\n        </div>\n    );\n}\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n       <div className='pa2'>\n        <input\n            className='pa3 ba b--green bg-lightest-blue'\n            type='search'\n            placeholder='search robots'\n            onChange ={searchChange}\n        />\n       </div>\n    );\n}\n\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY:'scroll',border:'1px solid black', height:'800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\n\nexport default Scroll\n","import React , {Component} from 'react';\n\nclass ComponentError extends Component {\n    constructor(props) {\n        super();\n        this.state ={\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error,info) {\n        this.setState({hasError: true})\n    }\n\n    render(){\n        if (this.state.hasError){\n            return <h1>Oooppss. That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\n\nexport default ComponentError\n","import React, {Component} from 'react';\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\"\nimport './App.css'\nimport Scroll from '../components/Scroll'\nimport ComponentError from \"../components/ComponentError\";\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => {\n                return response.json();\n            })\n            .then(users => {\n                this.setState({robots: users})\n            });\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n\n    }\n\n    render() {\n        const filteredRobots = this.state.robots.filter(robots => {\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n        if (this.state.robots.length === 0) {\n            return <h1>Loading...</h1>\n        } else {\n            return (\n                <div className='tc'>\n                    <h1 className='f1 '>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ComponentError>\n                        <CardList robots={filteredRobots}/>\n                        </ComponentError>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker, {unregister} from './registerServiceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />,\n    document.getElementById('root'));\nunregister();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}